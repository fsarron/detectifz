#!/usr/bin/env python
import os, sys
import subprocess
import re
import time
#import multiprocessing, logging

#import detectifz.setup_data as data
#import detectifz.detectifz as detectifz
#import detectifz.tiling as tiling

#import detectifz as dfz
#print(dfz.__path__)

from pathlib import Path

import argparse
import configparser

from dataclasses import dataclass
from pydantic import validate_arguments

import h5py
import numpy as np
import astropy.cosmology
from astropy.table import Table, Column

@validate_arguments
@dataclass
class ConfigTile:
    field: str
    release: str
    datadir: str
    tiles_rootdir: str
    masksfile: str
    maskstype: str

    nMC: int

    ra_colname: str
    dec_colname: str

    ramin: float
    ramax: float
    decmin: float
    decmax: float

    max_area: float
    border_width: float
    pixdeg: float
    
    lgmass_lim: float
    conflim_1sig: str
    conflim_2sig: str
    avg: str
    nprocs: int
    zmin: float
    zmax: float
    
    selection: str
    fit_Olga: bool
    fitdir_Olga: str

def read_lc(data_file):
    
    cosmo_Millennium = astropy.cosmology.FlatLambdaCDM(H0=73., Om0=0.25)
            
    hdf = h5py.File(data_file,'r')

    FOFID = hdf['FOFID'][:]
    GalNum = hdf['GalNum'][:]
    lgCentralMvir = np.log10(hdf['CentralMvir'][:]/cosmo_Millennium.h*1e10)
    lgStellarMass = np.log10(hdf['StellarMass'][:]/cosmo_Millennium.h*1e10)
    zcos = hdf['z_pos'][:]
    #zobs = hdf['z'][:]

    radec = hdf['PPos'][:]
    #pxpypz = hdf['Pos'][:]

    RAdeg = np.rad2deg(radec[:,0])
    DEdeg = np.rad2deg(radec[:,1])
    
    cat = Table()
    cat['GalNum'] = GalNum
    cat['FOFID'] = FOFID
    cat['ra'] = RAdeg
    cat['dec'] = DEdeg
    cat['z_cos'] = zcos
    cat.add_column(Column(lgStellarMass,name='lgMstars'))
    cat.add_column(Column(lgCentralMvir,name='lgCentralMvir'))
                         
    return cat
    
    
    
def make_detectifz_galcat_zonly(flux_file, photoz_file, lightcone_file):
    
    lightcone_cat = read_lc(lightcone_file)
    flux_cat = Table.read(flux_file)
    photoz_cat = Table.read(photoz_file)
    
    photoz_cat.remove_columns(['PHZ_MODE_1_SAMP',
                               'PHZ_MODE_1_AREA',
                               'PHZ_MODE_2_SAMP',
                               'PHZ_MODE_2_AREA',
                               'Z',
                               'Z_POS'])
    
    
    magH_tot = -2.5 * np.log10(flux_cat['FLUX_H_TOTAL']) + 23.9
    
    photoz_cat.add_column(Column(magH_tot, name='obs_magH'))

    photoz_cat.rename_columns(['RA',
                               'DEC',
                               'MEDIAN',
                               'MED_CENTER_MIN_70',
                               'MED_CENTER_MAX_70'], 
                              ['RA',
                               'DEC', 
                               'z_median',
                               'z_l70',
                               'z_u70'])
    
    
    
    lightcone_cat.sort('GalNum')
    photoz_cat.sort('GALNUM')
    
    isin = np.isin(lightcone_cat['GalNum'],photoz_cat['GALNUM'])
    
    print('')
    print('matching is good ? : ', np.all(lightcone_cat['GalNum'][isin] == photoz_cat['GALNUM']))
    print('')
    
    lgMstars = lightcone_cat['lgMstars'][isin]
    photoz_cat.add_column(Column(lgMstars, name='Mass_median'))
    photoz_cat.add_column(Column(-99*np.ones(len(photoz_cat)), name='Mass_l70'))
    photoz_cat.add_column(Column(-99*np.ones(len(photoz_cat)), name='Mass_u70'))

    return photoz_cat


parser = argparse.ArgumentParser()
parser.add_argument("-c","--configuration", type=str,
                    help = "Configuration file")
args = parser.parse_args()

print('')
print('read config')

config = configparser.ConfigParser()
config.read(args.configuration)
config_tile = ConfigTile(*[config['TILING'][f] for f in list(config['TILING'])])

fielddatadir = Path(config_tile.datadir+config_tile.field)
fielddatadir.joinpath(config_tile.field+'_perturbed_fluxes_for_release_'+config_tile.release+'.fits')
flux_file = fielddatadir.joinpath(config_tile.field+'_perturbed_fluxes_for_release_'+config_tile.release+'.fits')
photoz_file = fielddatadir.joinpath(config_tile.field+'_stats_1DPDF_for_release_'+config_tile.release+'.fits')
lightcone_file = fielddatadir.joinpath('lc_EUCLID_hdf5_'+config_tile.field+'_vH25')

##GALCAT
photoz_cat = make_detectifz_galcat_zonly(flux_file, photoz_file, lightcone_file)
photoz_cat.write(fielddatadir.joinpath(config_tile.field+'_for_release_'+config_tile.release+'.DETECTIFz.galcat.fits'),
                overwrite=True)


### SAMPLES
## If I have only 1DPDF ? Go create the samples with the routin validated for Olga (which has no reason to be in DETECTIFz)

fielddatadir.joinpath('samples').mkdir(parents=True, exist_ok=True)   
sampledir = fielddatadir.joinpath('samples')

samples_file = sampledir.joinpath(config_tile.field+'_for_release_'+config_tile.release+'.DETECTIFz.samples.fits')

if samples_file.is_file():
    print('samples file for DETECTIFz already exists, move on !')
else:
    root_sample_files = Path('/data77/Euclid-CW/simulations/'+
                             config_tile.field+
                            '/samples/'+
                            config_tile.field+'_samples_z_for_release_'+config_tile.release+'.fits')
    
    if root_sample_files.is_file():
        subprocess.run(["ln", "-s", root_sample_files, samples_file])
    else:
        raise ValueError('You should create a file of posterior samples before running DETECTIFz !')