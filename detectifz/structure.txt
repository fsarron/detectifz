This is the structure proposed by the scipy packaging tutorial

package_name/
    bin/
    CHANGES.txt
    docs/
    LICENSE.txt
    MANIFEST.in
    README.txt
    setup.py
    package_name/
          __init__.py
          module1.py
          module2.py
          test/
              __init__.py
              test_module1.py
              test_module2.py
              

Something similar in the style of Dissects would be 

package_name/
    bin/
    CHANGES.txt
    docs/
    LICENSE.txt
    MANIFEST.in
    README.txt
    setup.py
    package_name/
          __init__.py
          moduletype1/
              moduletype1_1.py
              moduletype1_2.py
          moduletype2/
              moduletype2_1.py
              moduletype2_2.py
          test/
              __init__.py
              test_module1.py
              test_module2.py


Not sure the Dissects way is so standard. I don't remember seeing it in most of the astro packages I dowloaded from GitHub. So I will go with the first structure.



I think what I want is to have one module_step.py for each step in the algorithm e.g. dtfe_mapping.py, detection.py, cleaning.py etc.


And one master that will be detectifz.py that include the definition of a class that is a detectifz object. So on this object I will be able to do detectifz.detect() 

This implies defining a method "detect" in the detectifz class. This method can call functions defined in the module detection.py














